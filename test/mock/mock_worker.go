// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/worker/worker.go

// Package mockworker is a generated GoMock package.
package mockworker

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	worker "workers/pkg/worker"
)

// MockWorker is a mock of Worker interface
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
}

// MockWorkerMockRecorder is the mock recorder for MockWorker
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockWorker) Run() {
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run
func (mr *MockWorkerMockRecorder) Run() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWorker)(nil).Run))
}

// PushJob mocks base method
func (m *MockWorker) PushJob(jobID uint, retries uint8, f func() error) {
	m.ctrl.Call(m, "PushJob", jobID, retries, f)
}

// PushJob indicates an expected call of PushJob
func (mr *MockWorkerMockRecorder) PushJob(jobID, retries, f interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushJob", reflect.TypeOf((*MockWorker)(nil).PushJob), jobID, retries, f)
}

// ConsumeJob mocks base method
func (m *MockWorker) ConsumeJob(workerID uint, jobs <-chan *worker.Job, errors chan<- error) {
	m.ctrl.Call(m, "ConsumeJob", workerID, jobs, errors)
}

// ConsumeJob indicates an expected call of ConsumeJob
func (mr *MockWorkerMockRecorder) ConsumeJob(workerID, jobs, errors interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeJob", reflect.TypeOf((*MockWorker)(nil).ConsumeJob), workerID, jobs, errors)
}

// PollJob mocks base method
func (m *MockWorker) PollJob() chan error {
	ret := m.ctrl.Call(m, "PollJob")
	ret0, _ := ret[0].(chan error)
	return ret0
}

// PollJob indicates an expected call of PollJob
func (mr *MockWorkerMockRecorder) PollJob() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollJob", reflect.TypeOf((*MockWorker)(nil).PollJob))
}

// Close mocks base method
func (m *MockWorker) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockWorkerMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWorker)(nil).Close))
}
